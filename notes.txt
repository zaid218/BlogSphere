environment variable should always be in string 

.env file for ourself 
.env.sample to tell user ,which are the env variables whose value he has to bring


slice=>
       a slice is a way to organize a Redux store, and it often includes reducer functions, actions, and selectors.


authSlice.actions =>
                    you are typically getting an object that contains action creators. These action creators are functions that, when called, produce action objects that follow the Flux Standard Action (FSA) format.authSlice.actions would be an object with login and logout as functions. You can use these functions to dispatch actions in your application:Each call to login or logout will create an action object with the corresponding type and payload, and then it will dispatch that action to the Redux store.


forwardRef=> 
            in hindi:suppose hme ek login and signup form chahiye ..toh uske liye ek input component bna dya  aur usee ko usename ke liye bhi use kr rhe ,usee ko password ke liye bhi use kr rhe ....jha pe bhi aapka page hoga wha pe toh saare inputs combined hoga .password bhi wahi hoga ..usename bhi whi hogaaur wha pe uski state ka access toh chchiye hoga ..kyunki ye jo components aap separately bnaoge usme toh state nhi rkhne waale ,wo toh individual componenet hai .toh compoent lhi aur hai ,use krhi aur ho rha hai toh component yha hai toh uski state toh yhi honi chahiye thi lekin uski state ka access toh yha pe chahiye aapko ..toh kuchh toh chahiye hoga ki mereko uska refernce mil jaaye ..toh uss componenet ka state toh chahiye hoga agar hm usee login form ya logout form me use krrhe ..toh isliye hi forward ref use hota hai           
            im english=>Suppose we need a login and signup form, and for that, we've created an input component that we use for both the username and password. Wherever your page is, all the inputs will be combined there. The password and username will be the same. Since these components are created separately, they won't maintain their state individually. They are just components being used here, and their state should ideally be maintained here. So, we need something that gives us access to their state. Therefore, forwardRef is used.



children props=>
               The children prop is a special prop in React that represents the content between the opening and closing tags of a component.
               In the context of a button, the children prop allows you to include content between the <Button> and </Button> tags. For example:
               eg 
                    Button>
                     Click me
                    /Button>
                    
                    
                    const Button =({ch})=>{
                          <   button>{ch</button>}
                    }



additional props =>
                      <Button disabled>
                        Click me
                      </Button>
                      disabled is passed as a additional prop
                      bgcolor and type and such are default prop ,if value is passed it will accept the new value else will take the default value
                      
                      const Button = ({
                        type = "button",
                        bgColor = "bg-blue-500",
                        textColor = "text-white",
                        className = "",
                        ...props
                      }) => {
                        return (
                          <button
                            className={ ${bgColor} ${textColor} ${className}`}
                            {...props}
                            type={`${type}`}
                          >
                            {children}
                          </button>
                        );
                      };
                      
                      export default Button;




important about Link=>
                      pura url nhi dena hota ...jha aap ho wha se aap aage jaa skte ho
                      in eng=>You don't have to provide the entire URL; you can navigate further from your current location
                      When using useNavigate, you usually provide the relative path or a route name rather than the full URL. The navigation is then handled by the underlying router.



clearing error state=>
                      Before initiating a new action, such as submitting a form or attempting a login, it's a good practice to clear any previous error messages. This is done using the setError("") line in your example.
                      Clearing previous errors provides a clean and user-friendly experience. It ensures that the user is not confused by old error messages when they try to take a new action. Without clearing the errors, the user might see stale error messages from a previous attempt, which could be misleading.



handleSubmit=>
               'handleSubmit: 'The term 'handleSubmit' has become a sort of a keyword because it comes to us from the form we are using, and it's a method in itself. So, please don't use the name 'handleSubmit' because the form, when completely submitted, triggers an actual event. This event is essential because wherever you place your input fields, etc., and use the register there, it automatically picks up the values you have written there. You don't have to manage the state of those values; it will automatically pick them up, and during the handleSubmit event, it will fetch all those values. That's why we use it.'




register in react-hook-form=>
                             iske andar unique name dena hai ...baaki addititonal checks dena hai .




query/indexes=>
               indexes nhi lgaae toh query nhi de skte ...queries apply krte list document use krte waqt.




...props=>
          to add new props




//first we made appwrit/authSlice
seconly         appwrite/config
3rd store
4th app.jsc
5th container
6th footer
7th logo.jsx
8th header
9th Button.jsx
10th input.jsx
11.select
12. postcard
13.login component not page
14.signup.jsx
15.AuthLayout
16.RtE
17.postform
18.signup page
19.login page
20.AddPost page
21.AllPosts page
22.EditPost page
23.post
24 main.jsx



everything is stored under the database named blog and under that under the collection named articles as '
<h1><span style="color: rgb(53, 152, 219);"><em><strong>hi hey there.this is bird.</strong></em></span></h1>
<p><span style="color: rgb(53, 152, 219);"><em><strong>ia m a zaid&nbsp;</strong></em></span></p>'

and each article has attribute title ,content ,status,featuredImage,userId


IN THE .ENV 
          for react app we start any variable name as REACT_APP_VARIABLENAME  and access it with process.env.REACT_APP_VARIABLENAME
          for vite app,we start any variable name as VITE_VARIABLENAME and access it with import.meta.env.VITE_VARIABLENAME
          if the environment variables are changed ,then restart the app


getfilepreview=>returns the preview or the url of the file that can be used by the image tag


name="content": This prop is also passed to the RTE component. It specifies the name of the form field associated with this Rich Text Editor. In React Hook Form, this name will be used to identify and manage the state of this field.
control={control}: This prop is used to pass the control object from React Hook Form to the RTE component. The control object is used by React Hook Form to register and manage form fields.
defaultValue={getValues("content")}: This prop sets the default value for the Rich Text Editor. The getValues function from React Hook Form is used to retrieve the current value of the "content" field from the form state and pass it as the default value to the Rich Text Editor.




In the line <RTE label="Content : (in 1000 characters)" name="content" control={control} defaultValue={getValues("content")} />, the register method of React Hook Form is not directly used for a few reasons:

Controller Component: The Controller component from React Hook Form is already being used inside the RTE component. The Controller component is specifically designed to integrate non-native form inputs, like third-party components or custom inputs (in this case, the TinyMCE Rich Text Editor), with React Hook Form. It handles the registration of the input with the form, as well as other aspects like validation and re-renders.
Ref Prop: The register method is typically used to register native HTML input elements (like <input>, <select>, <textarea>) directly with React Hook Form by passing a ref to the input. However, in the case of custom components or third-party libraries (like TinyMCE), direct registration using register might not be possible or straightforward. Instead, the Controller component abstracts away this complexity and provides a convenient way to integrate such components with React Hook Form.
Controlled Component: The Controller component wraps the TinyMCE Rich Text Editor, making it a controlled component. This means that React Hook Form controls the state of the editor, including its value. By passing control={control} to the Controller component, React Hook Form manages the state of the editor and handles updates to its value.